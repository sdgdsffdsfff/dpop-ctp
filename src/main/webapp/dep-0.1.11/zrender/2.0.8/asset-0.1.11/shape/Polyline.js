define("zrender/shape/Polyline",["require","./Base","./util/smoothSpline","./util/smoothBezier","./util/dashedLineTo","./Polygon","../tool/util"],function(require){var e=require("./Base"),t=require("./util/smoothSpline"),i=require("./util/smoothBezier"),n=require("./util/dashedLineTo"),a=function(t){this.brushTypeOnly="stroke",this.textPosition="end",e.call(this,t)};return a.prototype={type:"polyline",buildPath:function(e,i){var a=i.pointList;if(!(a.length<2)){var r=Math.min(i.pointList.length,Math.round(i.pointListLength||i.pointList.length));if(i.smooth&&"spline"!==i.smooth){if(!i.controlPointList)this.updateControlPoints(i);var o=i.controlPointList;e.moveTo(a[0][0],a[0][1]);for(var s,l,h,d=0;r-1>d;d++)s=o[2*d],l=o[2*d+1],h=a[d+1],e.bezierCurveTo(s[0],s[1],l[0],l[1],h[0],h[1])}else{if("spline"===i.smooth)a=t(a),r=a.length;if(!i.lineType||"solid"==i.lineType){e.moveTo(a[0][0],a[0][1]);for(var d=1;r>d;d++)e.lineTo(a[d][0],a[d][1])}else if("dashed"==i.lineType||"dotted"==i.lineType){var u=(i.lineWidth||1)*("dashed"==i.lineType?5:1);e.moveTo(a[0][0],a[0][1]);for(var d=1;r>d;d++)n(e,a[d-1][0],a[d-1][1],a[d][0],a[d][1],u)}}}},updateControlPoints:function(e){e.controlPointList=i(e.pointList,e.smooth,!1,e.smoothConstraint)},getRect:function(e){return require("./Polygon").prototype.getRect(e)}},require("../tool/util").inherits(a,e),a});